<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="buzzer_8cpp" kind="file" language="C++">
    <compoundname>buzzer.cpp</compoundname>
    <includes refid="buzzer_8h" local="yes">buzzer.h</includes>
    <includes refid="settings_8h" local="yes">settings/settings.h</includes>
    <includes local="no">Arduino.h</includes>
    <incdepgraph>
      <node id="9">
        <label>Arduino.h</label>
      </node>
      <node id="1">
        <label>src/peripherals/buzzer.cpp</label>
        <link refid="buzzer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>buzzer.h</label>
        <link refid="buzzer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>settings/settings.h</label>
        <link refid="settings_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>settings/settingsOption.h</label>
        <link refid="settings_option_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>settings_extra.h</label>
        <link refid="settings__extra_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>utilities/logging.h</label>
        <link refid="logging_8h"/>
      </node>
      <node id="12">
        <label>Preferences.h</label>
      </node>
      <node id="3">
        <label>initializer_list</label>
      </node>
      <node id="6">
        <label>json.h</label>
      </node>
      <node id="7">
        <label>json_conversions.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="buzzer_8cpp_1a501cb525811d65adab8440304ded38bc" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int pwmChannel</definition>
        <argsstring></argsstring>
        <name>pwmChannel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="5" column="12" bodyfile="src/peripherals/buzzer.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="buzzer_8cpp_1afa1a29d7cecad138223011407eb05e98" prot="public" static="yes" mutable="no">
        <type>QueueHandle_t</type>
        <definition>QueueHandle_t noteQueue</definition>
        <argsstring></argsstring>
        <name>noteQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="6" column="22" bodyfile="src/peripherals/buzzer.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="buzzer_8cpp_1a15902271717234b9c94f2b5286ebb016" prot="public" static="yes" mutable="no">
        <type>TaskHandle_t</type>
        <definition>TaskHandle_t buzzerTaskHandle</definition>
        <argsstring></argsstring>
        <name>buzzerTaskHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="7" column="21" bodyfile="src/peripherals/buzzer.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="buzzer_8cpp_1ade2c617243fa2ca52c5a51ba5de77524" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void buzzerTask</definition>
        <argsstring>(void *param)</argsstring>
        <name>buzzerTask</name>
        <param>
          <type>void *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="25" column="13" bodyfile="src/peripherals/buzzer.cpp" bodystart="25" bodyend="54" declfile="src/peripherals/buzzer.cpp" declline="9" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="buzzer_8cpp_1adf775279632314af92e24d9352cf1a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_buzzer</definition>
        <argsstring>(int pin, int pwmChannel)</argsstring>
        <name>init_buzzer</name>
        <param>
          <type>int</type>
          <declname>pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pwmChannel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="11" column="6" bodyfile="src/peripherals/buzzer.cpp" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="buzzer_8cpp_1a9531c132813c8ce3438d1707b5bd2c7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void deinit_buzzer</definition>
        <argsstring>(int pin)</argsstring>
        <name>deinit_buzzer</name>
        <param>
          <type>int</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="19" column="6" bodyfile="src/peripherals/buzzer.cpp" bodystart="19" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="buzzer_8cpp_1a82d3ae6bba9457549d977fa3f4b4fd45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void queueNotes</definition>
        <argsstring>(std::initializer_list&lt; BuzzerNote &gt; notes)</argsstring>
        <name>queueNotes</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref> &gt;</type>
          <declname>notes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="56" column="13" bodyfile="src/peripherals/buzzer.cpp" bodystart="56" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="buzzer_8cpp_1a715238193f24e1695195dcd80f498583" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Buzzer</definition>
        <argsstring>(std::initializer_list&lt; BuzzerNote &gt; notes)</argsstring>
        <name>Buzzer</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref> &gt;</type>
          <declname>notes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="69" column="6" bodyfile="src/peripherals/buzzer.cpp" bodystart="69" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="buzzer_8cpp_1aab71e5e9f16e56600e0e1d4416ed673b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BuzzerUI</definition>
        <argsstring>(std::initializer_list&lt; BuzzerNote &gt; notes)</argsstring>
        <name>BuzzerUI</name>
        <param>
          <type>std::initializer_list&lt; <ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref> &gt;</type>
          <declname>notes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/peripherals/buzzer.cpp" line="75" column="6" bodyfile="src/peripherals/buzzer.cpp" bodystart="75" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buzzer_8h" kindref="compound">buzzer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="settings_8h" kindref="compound">settings/settings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Arduino.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pwmChannel;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>QueueHandle_t<sp/>noteQueue;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>TaskHandle_t<sp/>buzzerTaskHandle;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buzzerTask(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*param);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="buzzer_8cpp_1adf775279632314af92e24d9352cf1a2d" kindref="member">init_buzzer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pwmChannel)</highlight></codeline>
<codeline lineno="12"><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>::pwmChannel<sp/>=<sp/>pwmChannel;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>ledcAttachPin(pin,<sp/>pwmChannel);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>noteQueue<sp/>=<sp/>xQueueCreate(10,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref>));</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>xTaskCreate(buzzerTask,<sp/></highlight><highlight class="stringliteral">&quot;buzzer&quot;</highlight><highlight class="normal">,<sp/>configMINIMAL_STACK_SIZE<sp/>*<sp/>3,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>5,<sp/>&amp;buzzerTaskHandle);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="buzzer_8cpp_1a9531c132813c8ce3438d1707b5bd2c7d" kindref="member">deinit_buzzer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pin)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelete(buzzerTaskHandle);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ledcDetachPin(pin);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>buzzerTask(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*param)</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref><sp/>note;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>TickType_t<sp/>noteEndTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>End<sp/>time<sp/>reached?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xTaskGetTickCount()<sp/>&gt;=<sp/>noteEndTime)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wait<sp/>indefinitely<sp/>for<sp/>the<sp/>next<sp/>note,<sp/>then<sp/>play<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueueReceive(noteQueue,<sp/>&amp;note,<sp/>portMAX_DELAY)<sp/>&amp;&amp;<sp/>note.<ref refid="struct_buzzer_note_1a257480a10e3d30cffeb1955c42cb4a57" kindref="member">freq</ref><sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ledcWriteTone(pwmChannel,<sp/>note.<ref refid="struct_buzzer_note_1a257480a10e3d30cffeb1955c42cb4a57" kindref="member">freq</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noteEndTime<sp/>=<sp/>xTaskGetTickCount()<sp/>+<sp/>note.<ref refid="struct_buzzer_note_1ababcc68ec3e25727c75fd056a150b6c9" kindref="member">time</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Peek<sp/>the<sp/>front<sp/>of<sp/>the<sp/>queue<sp/>to<sp/>check<sp/>for<sp/>a<sp/>cancellation<sp/>note<sp/>(-1,<sp/>-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xQueuePeek(noteQueue,<sp/>&amp;note,<sp/>0)<sp/>&amp;&amp;<sp/>note.<ref refid="struct_buzzer_note_1a257480a10e3d30cffeb1955c42cb4a57" kindref="member">freq</ref><sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noteEndTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(5);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>queueNotes(std::initializer_list&lt;BuzzerNote&gt;<sp/>notes)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueReset(noteQueue);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref><sp/>cancel<sp/>=<sp/>{-1,<sp/>-1};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueSend(noteQueue,<sp/>&amp;cancel,<sp/>0);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>note<sp/>:<sp/>notes)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueSend(noteQueue,<sp/>&amp;note,<sp/>0);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buzzer_note" kindref="compound">BuzzerNote</ref><sp/>off<sp/>=<sp/>{0,<sp/>0};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueSend(noteQueue,<sp/>&amp;off,<sp/>0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="buzzer_8cpp_1a715238193f24e1695195dcd80f498583" kindref="member">Buzzer</ref>(std::initializer_list&lt;BuzzerNote&gt;<sp/>notes)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="settings_8cpp_1a19276c778f3034b94881cf1f8614dbb2" kindref="member">settings</ref>.<ref refid="class_settings_1a4ca1d960902db935f5a7ec3db599b53c" kindref="member">config</ref>.<ref refid="struct_config_1aa811fa8a4f958fe255c04368233f36ca" kindref="member">audio_alarm</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueNotes(notes);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="buzzer_8cpp_1aab71e5e9f16e56600e0e1d4416ed673b" kindref="member">BuzzerUI</ref>(std::initializer_list&lt;BuzzerNote&gt;<sp/>notes)</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="settings_8cpp_1a19276c778f3034b94881cf1f8614dbb2" kindref="member">settings</ref>.<ref refid="class_settings_1a4ca1d960902db935f5a7ec3db599b53c" kindref="member">config</ref>.<ref refid="struct_config_1ab96058cff80a87107bd72619f96261ed" kindref="member">audio_ui</ref>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queueNotes(notes);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/peripherals/buzzer.cpp"/>
  </compounddef>
</doxygen>
